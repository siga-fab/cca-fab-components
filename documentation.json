{
  "pipes": [],
  "interfaces": [],
  "injectables": [],
  "classes": [],
  "directives": [],
  "components": [
    {
      "name": "ButtonComponent",
      "id": "component-ButtonComponent-2c138878b26c9f508b8841f7edc1a9ce",
      "file": "projects/common/src/lib/button/button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "cca-common-button",
      "styleUrls": ["./button.component.scss"],
      "styles": [],
      "templateUrl": ["./button.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "badged",
          "line": 22,
          "type": "boolean"
        },
        {
          "name": "type",
          "line": 21,
          "type": "\"outline\" | \"fill\" | \"transparent\""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "animate",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "animateMsTime",
          "defaultValue": "850",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 25
        },
        {
          "name": "disabled",
          "type": "",
          "optional": false,
          "description": "",
          "line": 35,
          "decorators": [
            {
              "name": "Optional",
              "stringifiedArguments": ""
            },
            {
              "name": "Attribute",
              "stringifiedArguments": "'disabled'"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "flat",
          "type": "",
          "optional": false,
          "description": "",
          "line": 32,
          "decorators": [
            {
              "name": "Optional",
              "stringifiedArguments": ""
            },
            {
              "name": "Attribute",
              "stringifiedArguments": "'flat'"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "hasIcon",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "hasText",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "icon",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 18,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'iconRef'"
            }
          ]
        },
        {
          "name": "negative",
          "type": "",
          "optional": false,
          "description": "",
          "line": 34,
          "decorators": [
            {
              "name": "Optional",
              "stringifiedArguments": ""
            },
            {
              "name": "Attribute",
              "stringifiedArguments": "'negative'"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "secondary",
          "type": "",
          "optional": false,
          "description": "",
          "line": 31,
          "decorators": [
            {
              "name": "Optional",
              "stringifiedArguments": ""
            },
            {
              "name": "Attribute",
              "stringifiedArguments": "'secondary'"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "text",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 19,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'textRef'"
            }
          ]
        },
        {
          "name": "warning",
          "type": "",
          "optional": false,
          "description": "",
          "line": 33,
          "decorators": [
            {
              "name": "Optional",
              "stringifiedArguments": ""
            },
            {
              "name": "Attribute",
              "stringifiedArguments": "'warning'"
            }
          ],
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 40
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38
        },
        {
          "name": "onClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  ViewChild,\n  AfterViewInit,\n  ElementRef,\n  Optional,\n  Attribute,\n} from '@angular/core';\n\n@Component({\n  selector: 'cca-common-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent implements OnInit, AfterViewInit {\n  @ViewChild('iconRef') icon!: ElementRef;\n  @ViewChild('textRef') text!: ElementRef;\n\n  @Input() type?: 'outline' | 'fill' | 'transparent';\n  @Input() badged?: boolean;\n\n  animate = false;\n  animateMsTime = 850;\n\n  hasIcon = false;\n  hasText = false;\n\n  constructor(\n    @Optional() @Attribute('secondary') public secondary,\n    @Optional() @Attribute('flat') public flat,\n    @Optional() @Attribute('warning') public warning,\n    @Optional() @Attribute('negative') public negative,\n    @Optional() @Attribute('disabled') public disabled\n  ) {}\n\n  ngOnInit() {}\n\n  ngAfterViewInit() {\n    this.hasIcon = this.icon.nativeElement.children.length > 0;\n    this.hasText = this.text.nativeElement.textContent !== '';\n  }\n\n  onClick() {\n    if (!this.animate) {\n      this.animate = true;\n\n      setTimeout(() => {\n        this.animate = false;\n      }, this.animateMsTime);\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '../../assets/scss/colors.scss';\n@import '../../assets/scss/variables.scss';\n\n@keyframes wave {\n  from {\n    box-shadow: 0 0 0 5px #{$tertiary}AA;\n  }\n\n  to {\n    transform: scaleX(1.4) scaleY(1.6);\n    opacity: 0;\n  }\n}\n\n@keyframes wave-icon {\n  from {\n    box-shadow: 0 0 0 5px #{$tertiary}AA;\n  }\n\n  to {\n    transform: scaleX(1.8) scaleY(1.8);\n    opacity: 0;\n  }\n}\n\n.button {\n  // Container styles\n  position: relative;\n\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n  height: 3.6rem;\n\n  color: $primary;\n\n  appearance: none;\n  border-radius: 2rem;\n  outline: none;\n  cursor: pointer;\n  user-select: none;\n\n  &::after {\n    content: '';\n\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: -1;\n\n    display: inline-flex;\n    height: 100%;\n    width: 100%;\n\n    border-radius: 2rem;\n    background: transparent;\n  }\n\n  // Behavior\n  transition: box-shadow 100ms ease-in-out, color 150ms ease-in-out,\n    background 150ms ease-in-out, border 150ms ease-in-out;\n\n  &.clicked-btn::after {\n    animation: wave 850ms;\n  }\n\n  &.icon-btn:not(.text-btn).clicked-btn::after {\n    animation: wave-icon 850ms;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n  }\n\n  &:hover:not(.transparent-btn):not(:disabled),\n  &:focus {\n    box-shadow: $focus-shadow;\n  }\n\n  // Elements display\n  &.icon-btn.text-btn {\n    padding: 0 1.3rem;\n\n    .button-icon {\n      margin-right: 2rem;\n    }\n  }\n\n  &.icon-btn:not(.text-btn) {\n    padding: 0 0.4rem;\n  }\n\n  &.text-btn:not(.icon-btn) {\n    padding: 0 2rem;\n  }\n\n  .button-text:not(:empty) {\n    font-size: 1.6rem;\n    line-height: 1.9rem;\n    text-transform: uppercase;\n  }\n\n  // Badge\n  .button-icon:not(:empty) {\n    position: relative;\n  }\n\n  &.badged-btn > .button-icon::after {\n    content: '';\n\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 1;\n\n    display: inline-flex;\n    height: 1.4rem;\n    width: 1.4rem;\n    margin-right: -0.2rem;\n    margin-top: -0.2rem;\n\n    border-radius: 50%;\n    background: $warning;\n  }\n\n  // Themes\n  &.secondary-btn {\n    color: $black;\n  }\n\n  &.secondary-btn:not(.transparent-btn) {\n    border-color: $black;\n  }\n\n  &.secondary-btn.fill-btn {\n    color: $white;\n    background: $black;\n  }\n\n  &.flat-btn {\n    color: $grey;\n  }\n\n  &.flat-btn:not(.transparent-btn) {\n    border-color: $grey;\n  }\n\n  &.flat-btn.fill-btn {\n    background: $grey;\n  }\n\n  &.warning-btn {\n    color: $warning;\n  }\n\n  &.warning-btn:not(.transparent-btn) {\n    border-color: $warning;\n  }\n\n  &.warning-btn.fill-btn {\n    background: $warning;\n  }\n\n  &.negative-btn {\n    color: $white;\n  }\n\n  &.negative-btn:not(.transparent-btn) {\n    border-color: $white;\n  }\n\n  &.negative-btn.fill-btn {\n    background: $white;\n    color: $primary;\n  }\n\n  &.negative-btn.transparent-btn {\n    &:hover {\n      background: #{$light-grey}33;\n      border: 0.2rem solid transparent;\n    }\n  }\n\n  // Default themes\n  &.outline-btn {\n    background: transparent;\n    border: 0.2rem solid $primary;\n  }\n\n  &.fill-btn {\n    background: $primary;\n    border: 0.2rem solid $primary;\n    color: $white;\n  }\n\n  &.transparent-btn {\n    background: transparent;\n    border: 0.2rem solid transparent;\n\n    &:hover:not(:disabled):not(.negative-btn) {\n      background: $light-grey;\n    }\n  }\n}\n",
          "styleUrl": "./button.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "secondary",
            "type": ""
          },
          {
            "name": "flat",
            "type": ""
          },
          {
            "name": "warning",
            "type": ""
          },
          {
            "name": "negative",
            "type": ""
          },
          {
            "name": "disabled",
            "type": ""
          }
        ],
        "line": 28,
        "jsdoctags": [
          {
            "name": "secondary",
            "type": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "flat",
            "type": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "warning",
            "type": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "negative",
            "type": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "disabled",
            "type": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "AfterViewInit"],
      "templateData": "<button\n  class=\"button\"\n  (click)=\"onClick()\"\n  [disabled]=\"disabled === ''\"\n  [ngClass]=\"{\n    'icon-btn': hasIcon,\n    'text-btn': hasText,\n    'badged-btn': badged,\n    'outline-btn': !type || type === 'outline',\n    'fill-btn': type === 'fill',\n    'transparent-btn': type === 'transparent',\n    'clicked-btn': animate,\n    'secondary-btn': secondary === '',\n    'flat-btn': flat === '',\n    'warning-btn': warning === '',\n    'negative-btn': negative === ''\n  }\"\n>\n  <div #iconRef class=\"button-icon\">\n    <ng-content select=\"[slot='icon']\"></ng-content>\n  </div>\n  <span #textRef class=\"button-text\"\n    ><ng-content #text select=\"[slot='text']\"></ng-content\n  ></span>\n</button>\n"
    },
    {
      "name": "CardComponent",
      "id": "component-CardComponent-90dbd1daaca91b69a40428f3ec41d9c4",
      "file": "projects/common/src/lib/card/card.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "cca-common-card",
      "styleUrls": ["./card.component.scss"],
      "styles": [],
      "templateUrl": ["./card.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 11
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'cca-common-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss'],\n})\nexport class CardComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '../../assets/scss/variables.scss';\n\n.card {\n  width: 100%;\n  height: 100%;\n  padding: $padding;\n\n  background: #ffffff;\n  border: 1px solid #edeff1;\n  box-shadow: $box-shadow;\n  border-radius: 5px;\n}\n",
          "styleUrl": "./card.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"card\"><ng-content></ng-content></div>\n"
    },
    {
      "name": "IconComponent",
      "id": "component-IconComponent-bec01d3f1c856ad03182d635bd631f3e",
      "file": "projects/common/src/lib/icon/icon.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "cca-common-icon",
      "styleUrls": ["./icon.component.scss"],
      "styles": [],
      "templateUrl": ["./icon.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "color",
          "line": 10,
          "type": "string"
        },
        {
          "name": "size",
          "line": 9,
          "type": "number"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 14
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'cca-common-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss'],\n})\nexport class IconComponent implements OnInit {\n  @Input() size?: number;\n  @Input() color?: string;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "$material-icons-font-path: '../../assets/fonts/';\n@import '~material-icons/iconfont/material-icons.scss';\n\n.material-icons {\n  display: flex;\n  user-select: none;\n}\n",
          "styleUrl": "./icon.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 10
      },
      "implements": ["OnInit"],
      "templateData": "<span class=\"material-icons\" [ngStyle]=\"{ 'font-size.px': size, color: color }\">\n  <ng-content></ng-content>\n</span>\n"
    },
    {
      "name": "InputComponent",
      "id": "component-InputComponent-d5ee05a89f7d3055975d5bb03f0d8465",
      "file": "projects/common/src/lib/input/input.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "cca-common-input",
      "styleUrls": ["./input.component.scss"],
      "styles": [],
      "templateUrl": ["./input.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "disabled",
          "defaultValue": "false",
          "line": 47
        },
        {
          "name": "focus",
          "defaultValue": "false",
          "line": 51
        },
        {
          "name": "max",
          "line": 50,
          "type": "number"
        },
        {
          "name": "min",
          "line": 49,
          "type": "number"
        },
        {
          "name": "step",
          "defaultValue": "1",
          "line": 48
        },
        {
          "name": "type",
          "defaultValue": "'text'",
          "line": 46
        },
        {
          "name": "value",
          "defaultValue": "''",
          "line": 45
        }
      ],
      "outputsClass": [
        {
          "name": "confirm",
          "defaultValue": "new EventEmitter()",
          "line": 53,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "numberInterval",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 55,
          "modifierKind": [112]
        },
        {
          "name": "numberIntervalCounter",
          "defaultValue": "1",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 56,
          "modifierKind": [112]
        },
        {
          "name": "slim",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 60,
          "decorators": [
            {
              "name": "Optional",
              "stringifiedArguments": ""
            },
            {
              "name": "Attribute",
              "stringifiedArguments": "'slim'"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "textCenter",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 59,
          "decorators": [
            {
              "name": "Optional",
              "stringifiedArguments": ""
            },
            {
              "name": "Attribute",
              "stringifiedArguments": "'textCenter'"
            }
          ],
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "clearNumberInterval",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 78,
          "modifierKind": [112]
        },
        {
          "name": "isFocused",
          "args": [
            {
              "name": "value",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68,
          "jsdoctags": [
            {
              "name": "value",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 66
        },
        {
          "name": "onKeyDown",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 88,
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onMouseUp",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 84
        },
        {
          "name": "rangedValue",
          "args": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94,
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateValue",
          "args": [
            {
              "name": "event",
              "type": "Event"
            },
            {
              "name": "operation",
              "type": "\"add\" | \"sub\""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 106,
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "operation",
              "type": "\"add\" | \"sub\"",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { trigger, transition, animate, style } from '@angular/animations';\nimport {\n  Attribute,\n  Component,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  EventEmitter,\n} from '@angular/core';\n\n@Component({\n  selector: 'cca-common-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n  animations: [\n    trigger('fadeInOut', [\n      transition(':enter', [\n        style({\n          opacity: 0,\n        }),\n        animate(\n          '.1s ease-in-out',\n          style({\n            opacity: 1,\n          })\n        ),\n      ]),\n\n      transition(':leave', [\n        style({\n          opacity: 1,\n        }),\n        animate(\n          '.1s ease-in-out',\n          style({\n            opacity: 0,\n          })\n        ),\n      ]),\n    ]),\n  ],\n})\nexport class InputComponent implements OnInit {\n  @Input() value = '';\n  @Input() type = 'text';\n  @Input() disabled = false;\n  @Input() step = 1;\n  @Input() min: number;\n  @Input() max: number;\n  @Input() focus = false;\n\n  @Output() confirm = new EventEmitter();\n\n  private numberInterval: any;\n  private numberIntervalCounter = 1;\n\n  constructor(\n    @Optional() @Attribute('textCenter') public textCenter: any,\n    @Optional() @Attribute('slim') public slim: any\n  ) {\n    this.textCenter = textCenter !== null;\n    this.slim = slim !== null;\n  }\n\n  ngOnInit(): void {}\n\n  isFocused(value: boolean) {\n    this.focus = value;\n    if (!value) {\n      this.confirm.emit(this.value);\n      if (this.numberInterval) {\n        this.clearNumberInterval();\n      }\n    }\n  }\n\n  private clearNumberInterval() {\n    clearInterval(this.numberInterval);\n    this.numberInterval = null;\n    this.numberIntervalCounter = 1;\n  }\n\n  onMouseUp() {\n    this.clearNumberInterval();\n  }\n\n  onKeyDown(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.confirm.emit(this.value);\n    }\n  }\n\n  rangedValue(event: Event) {\n    const el = event.target as HTMLInputElement;\n    const value = parseInt(el.value, 10);\n\n    if (this.type === 'number') {\n      this.value = el.value =\n        this.max && this.min\n          ? String(Math.max(Math.min(this.max, value), this.min))\n          : el.value;\n    }\n  }\n\n  updateValue(event: Event, operation: 'add' | 'sub') {\n    // Impede remoção do foco do input\n    event.preventDefault();\n    const step = operation === 'add' ? +this.step : -this.step;\n\n    // Atualiza o valor imediatamente\n    this.value =\n      this.max && this.min\n        ? String(\n            Math.max(\n              Math.min(this.max, parseInt(this.value, 10) + step),\n              this.min\n            )\n          )\n        : String(parseInt(this.value, 10) + step);\n\n    // Cria intervalo onde (depois de um delay de 500ms) atualiza o valor do input a cada 50ms\n    this.numberInterval = setInterval(() => {\n      if (this.numberIntervalCounter > 10) {\n        // Garante o delay de 500ms (50 do intervalo, e 10 das iterações com contador menor que 10)\n        this.value =\n          this.max && this.min\n            ? String(\n                Math.max(\n                  Math.min(this.max, parseInt(this.value, 10) + step),\n                  this.min\n                )\n              )\n            : String(parseInt(this.value, 10) + step);\n      }\n      ++this.numberIntervalCounter;\n    }, 50);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '../../assets/scss/colors.scss';\n@import '../../assets/scss/variables.scss';\n\n:host {\n  position: relative;\n  display: inline-block;\n\n  input[type] {\n    color: $grey;\n    font-family: Cabin;\n    font-size: 1.4rem;\n\n    width: 100%;\n\n    border-radius: 0.5rem;\n    border: 1px solid $light-grey;\n    height: 3.6rem;\n\n    &.center {\n      text-align: center;\n    }\n\n    &.slim {\n      height: 2.4rem;\n    }\n\n    transition: box-shadow 0.1s ease-in-out;\n\n    &:focus {\n      box-shadow: $focus-shadow;\n      outline: 0;\n    }\n\n    &[type='number']::-webkit-outer-spin-button,\n    &[type='number']::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n\n    &[type='number'] {\n      -moz-appearance: textfield;\n    }\n  }\n\n  .number-minus,\n  .number-plus {\n    position: absolute;\n    left: calc(50% - 12px);\n    cursor: pointer;\n  }\n\n  .number-minus {\n    bottom: -2.5rem;\n  }\n\n  .number-plus {\n    top: -2.5rem;\n  }\n}\n",
          "styleUrl": "./input.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "textCenter",
            "type": "any"
          },
          {
            "name": "slim",
            "type": "any"
          }
        ],
        "line": 56,
        "jsdoctags": [
          {
            "name": "textCenter",
            "type": "any",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "slim",
            "type": "any",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div\n  [@fadeInOut]\n  (mouseleave)=\"onMouseUp()\"\n  (mousedown)=\"updateValue($event, 'add')\"\n  (mouseup)=\"onMouseUp()\"\n  class=\"number-plus\"\n  *ngIf=\"type === 'number' && focus\"\n>\n  <cca-common-icon>expand_less</cca-common-icon>\n</div>\n\n<input\n  [min]=\"min\"\n  [max]=\"max\"\n  [step]=\"step\"\n  [type]=\"type\"\n  [value]=\"value\"\n  [ngClass]=\"{ center: textCenter, slim: slim }\"\n  [disabled]=\"disabled\"\n  (focus)=\"isFocused(true)\"\n  (blur)=\"isFocused(false)\"\n  (keyup)=\"rangedValue($event)\"\n  (keydown)=\"onKeyDown($event)\"\n/>\n\n<div\n  [@fadeInOut]\n  (mouseleave)=\"onMouseUp()\"\n  (mousedown)=\"updateValue($event, 'sub')\"\n  (mouseup)=\"onMouseUp()\"\n  class=\"number-minus\"\n  [ngClass]=\"{ slim: slim }\"\n  *ngIf=\"type === 'number' && focus\"\n>\n  <cca-common-icon>expand_more</cca-common-icon>\n</div>\n"
    },
    {
      "name": "TableComponent",
      "id": "component-TableComponent-51c61214136dc842251fbd1903e3772a",
      "file": "projects/common/src/lib/table/table.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "cca-common-table",
      "styleUrls": ["./table.component.scss"],
      "styles": [],
      "templateUrl": ["./table.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "dataSource",
          "defaultValue": "[{ default: 'default' }]",
          "line": 24
        },
        {
          "name": "maxPageSize",
          "line": 21,
          "type": "number"
        },
        {
          "name": "pageIndex",
          "defaultValue": "1",
          "line": 22
        },
        {
          "name": "pageSize",
          "line": 20,
          "type": "number"
        },
        {
          "name": "totalEntries",
          "line": 23,
          "type": "number"
        }
      ],
      "outputsClass": [
        {
          "name": "firstPage",
          "defaultValue": "new EventEmitter()",
          "line": 11,
          "type": "EventEmitter"
        },
        {
          "name": "lastPage",
          "defaultValue": "new EventEmitter()",
          "line": 10,
          "type": "EventEmitter"
        },
        {
          "name": "nextPage",
          "defaultValue": "new EventEmitter()",
          "line": 12,
          "type": "EventEmitter"
        },
        {
          "name": "pageIndexChange",
          "defaultValue": "new EventEmitter()",
          "line": 18,
          "type": "EventEmitter"
        },
        {
          "name": "pageSizeChange",
          "defaultValue": "new EventEmitter()",
          "line": 17,
          "type": "EventEmitter"
        },
        {
          "name": "previousPage",
          "defaultValue": "new EventEmitter()",
          "line": 13,
          "type": "EventEmitter"
        },
        {
          "name": "refresh",
          "defaultValue": "new EventEmitter()",
          "line": 15,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "headers",
          "defaultValue": "[]",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "totalPages",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 26
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31
        },
        {
          "name": "onFirstPage",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51
        },
        {
          "name": "onLastPage",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 46
        },
        {
          "name": "onNextPage",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 56
        },
        {
          "name": "onPageIndexChange",
          "args": [
            {
              "name": "pageIndex",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 72,
          "jsdoctags": [
            {
              "name": "pageIndex",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onPageSizeChange",
          "args": [
            {
              "name": "pageSize",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76,
          "jsdoctags": [
            {
              "name": "pageSize",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onPreviousPage",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62
        },
        {
          "name": "onRefresh",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { TitleCasePipe } from '@angular/common';\nimport { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\n\n@Component({\n  selector: 'cca-common-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss'],\n})\nexport class TableComponent implements OnInit {\n  @Output() lastPage = new EventEmitter();\n  @Output() firstPage = new EventEmitter();\n  @Output() nextPage = new EventEmitter();\n  @Output() previousPage = new EventEmitter();\n\n  @Output() refresh = new EventEmitter();\n\n  @Output() pageSizeChange = new EventEmitter();\n  @Output() pageIndexChange = new EventEmitter();\n\n  @Input() pageSize: number;\n  @Input() maxPageSize: number;\n  @Input() pageIndex = 1;\n  @Input() totalEntries: number;\n  @Input() dataSource = [{ default: 'default' }];\n\n  totalPages: number;\n  headers: string[] = [];\n\n  constructor() {}\n\n  ngOnInit(): void {\n    const headers = new Set();\n\n    for (const data of this.dataSource) {\n      for (const key of Object.keys(data)) {\n        headers.add(key);\n      }\n    }\n\n    this.totalPages = Math.ceil(this.totalEntries / this.pageSize);\n    this.headers = [...headers] as string[];\n\n    // console.log(this.headers);\n  }\n\n  onLastPage() {\n    this.pageIndex = this.totalPages;\n    this.lastPage.emit(this.totalPages);\n  }\n\n  onFirstPage() {\n    this.pageIndex = 1;\n    this.firstPage.emit(1);\n  }\n\n  onNextPage() {\n    this.nextPage.emit(\n      this.pageIndex < this.totalPages ? ++this.pageIndex : this.pageIndex\n    );\n  }\n\n  onPreviousPage() {\n    this.previousPage.emit(\n      this.pageIndex > 1 ? --this.pageIndex : this.pageIndex\n    );\n  }\n\n  onRefresh() {\n    this.refresh.emit(this.pageIndex);\n  }\n\n  onPageIndexChange(pageIndex: number) {\n    this.pageIndexChange.emit(pageIndex);\n  }\n\n  onPageSizeChange(pageSize: number) {\n    this.totalPages = Math.ceil(this.totalEntries / pageSize);\n    this.pageSizeChange.emit(pageSize);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '~flexboxgrid/dist/flexboxgrid.min.css';\n@import '../../assets/scss/colors.scss';\n\n@keyframes rotate {\n  0% {\n    transform: rotate(360deg);\n  }\n\n  100% {\n    transform: rotate(0deg);\n  }\n}\n\n.table {\n  position: relative;\n\n  background: $white;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.25);\n  border: 1px solid $border-grey;\n  border-radius: 0.5rem;\n\n  /* For testing only */\n  width: 80vw;\n  margin: auto;\n  /*------------------*/\n\n  font-family: Cabin;\n  font-size: 1.4rem;\n\n  .header,\n  .footer {\n    padding: 2rem;\n  }\n\n  .header {\n    color: $grey;\n    font-weight: bold;\n\n    border-bottom: 2px solid $light-grey;\n  }\n\n  .body {\n    color: $black;\n\n    padding: 0 2rem;\n    margin: 0 -0.5rem;\n\n    > .row {\n      margin: 0 -2rem;\n      padding: 0 2rem;\n\n      &:nth-child(2n) {\n        background: $lighter-grey;\n      }\n\n      > .col-xs {\n        padding: 2rem 0.5rem;\n      }\n    }\n  }\n\n  .footer {\n    border-top: 2px solid $light-grey;\n\n    .button {\n      cursor: pointer;\n      transition: color 0.1s ease-in-out;\n\n      &.light {\n        color: #dadada;\n      }\n    }\n\n    .button:hover {\n      color: rgba(0, 0, 0, 0.75);\n    }\n\n    .input {\n      margin-left: 0.2rem;\n      display: inline-block;\n      width: 3rem;\n    }\n\n    > .left {\n      color: $grey;\n\n      .button:hover {\n        animation: rotate 2s ease-in-out infinite;\n      }\n\n      & > div:last-child {\n        margin-left: 1.2rem;\n      }\n    }\n\n    > .right {\n      color: $grey;\n\n      .label {\n        margin: 0 1rem;\n      }\n    }\n  }\n}\n",
          "styleUrl": "./table.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 27
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"table col-xs\">\n  <div class=\"header row\">\n    <div class=\"col-xs\" *ngFor=\"let header of headers\">\n      {{ header }}\n    </div>\n  </div>\n  <div class=\"body\">\n    <div class=\"row\" *ngFor=\"let data of dataSource\">\n      <div class=\"col-xs\" *ngFor=\"let header of headers\">\n        {{ data[header] }}\n      </div>\n      <!-- <div class=\"col-xs\">\n        Ações\n      </div> -->\n    </div>\n  </div>\n  <div class=\"footer row between-xs\">\n    <div class=\"row left middle-xs\">\n      <div class=\"button\" (click)=\"onRefresh()\">\n        <cca-common-icon>loop</cca-common-icon>\n      </div>\n      <div>\n        Itens por página:\n        <span class=\"input\">\n          <cca-common-input\n            type=\"number\"\n            [value]=\"pageSize\"\n            (confirm)=\"onPageSizeChange($event)\"\n            min=\"10\"\n            [max]=\"maxPageSize\"\n            step=\"10\"\n            slim\n            textCenter\n          ></cca-common-input>\n        </span>\n      </div>\n    </div>\n    <div class=\"row right middle-xs\">\n      <div class=\"button light\" (click)=\"onFirstPage()\">\n        <cca-common-icon>first_page</cca-common-icon>\n      </div>\n      <div class=\"button\" (click)=\"onPreviousPage()\">\n        <cca-common-icon>chevron_left</cca-common-icon>\n      </div>\n\n      <div class=\"label\">\n        Página:\n        <span class=\"input\">\n          <cca-common-input\n            type=\"number\"\n            [value]=\"pageIndex\"\n            min=\"1\"\n            [max]=\"totalPages\"\n            (confirm)=\"onPageIndexChange($event)\"\n            slim\n            textCenter\n          ></cca-common-input>\n        </span>\n        / {{ totalPages }}\n      </div>\n\n      <div class=\"button\" (click)=\"onNextPage()\">\n        <cca-common-icon>chevron_right</cca-common-icon>\n      </div>\n\n      <div class=\"button light\" (click)=\"onLastPage()\">\n        <cca-common-icon>last_page</cca-common-icon>\n      </div>\n    </div>\n  </div>\n</div>\n"
    }
  ],
  "modules": [
    {
      "name": "ButtonModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ButtonComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ButtonComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "CardModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "CardComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "CardComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "IconModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "IconComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "IconComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "InputModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "InputComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "IconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "InputComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "TableModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "TableComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "IconModule"
            },
            {
              "name": "InputModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "TableComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/common/Input.stories.ts",
        "type": "",
        "defaultValue": "() => ({\n  component: InputComponent,\n})"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/common/Table.stories.ts",
        "type": "",
        "defaultValue": "() => ({\n  component: TableComponent,\n  props: {\n    firstPage: action('firstPage'),\n    lastPage: action('lastPage'),\n    nextPage: action('nextPage'),\n    previousPage: action('previousPage'),\n    refresh: action('refresh'),\n    pageSizeChange: action('pageSizeChange'),\n    pageIndexChange: action('pageIndexChange'),\n    pageSize: 10,\n    pageIndex: 1,\n    totalEntries: 200,\n    dataSource: [\n      {\n        'Cabeçalho 1': 'Coluna 1',\n        'Cabeçalho 2': 'Coluna 2',\n        'Cabeçalho 3': 'Coluna 3',\n        'Cabeçalho 4': 'Coluna 4',\n        'Cabeçalho 5': 'Coluna 5',\n      },\n      {\n        'Cabeçalho 1': 'Coluna 1',\n        'Cabeçalho 2': 'Coluna 2',\n        'Cabeçalho 3': 'Coluna 3',\n        'Cabeçalho 4': 'Coluna 4',\n        'Cabeçalho 5': 'Coluna 5',\n      },\n      {\n        'Cabeçalho 1': 'Coluna 1',\n        'Cabeçalho 2': 'Coluna 2',\n        'Cabeçalho 3': 'Coluna 3',\n        'Cabeçalho 4': 'Coluna 4',\n        'Cabeçalho 5': 'Coluna 5',\n      },\n      {\n        'Cabeçalho 1': 'Coluna 1',\n        'Cabeçalho 2': 'Coluna 2',\n        'Cabeçalho 3': 'Coluna 3',\n        'Cabeçalho 4': 'Coluna 4',\n        'Cabeçalho 5': 'Coluna 5',\n      },\n      {\n        'Cabeçalho 1': 'Coluna 1',\n        'Cabeçalho 2': 'Coluna 2',\n        'Cabeçalho 3': 'Coluna 3',\n        'Cabeçalho 4': 'Coluna 4',\n        'Cabeçalho 5': 'Coluna 5',\n      },\n    ],\n  },\n})"
      },
      {
        "name": "Fill",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/common/Button.stories.ts",
        "type": "",
        "defaultValue": "() => ({\n  props: {\n    click: action('This was clicked OMG'),\n  },\n  template: `\n    <ul style=\"display: flex; flex-flow: row wrap; max-width: 100rem; list-style-type: none;\">\n      <li style=\"padding: .5rem\">\n        <cca-common-button type=\"fill\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          <ng-container slot=\"text\">fill</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button type=\"fill\" (click)=\"click($event)\">\n          <ng-container slot=\"text\">fill</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button type =\"fill\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n        </cca-common-button>\n      </li>\n    </ul>\n  `,\n})"
      },
      {
        "name": "Notification",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/common/Button.stories.ts",
        "type": "",
        "defaultValue": "() => ({\n  props: {\n    click: action('This was clicked OMG'),\n  },\n  template: `\n    <ul style=\"display: flex; flex-flow: row wrap; max-width: 100rem; list-style-type: none;\">\n      <li style=\"padding: .5rem\">\n        <cca-common-button badged=\"true\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">error_outline</cca-common-icon>\n          <ng-container slot=\"text\">notification</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button badged=\"true\" type=\"fill\" (click)=\"click($event)\">\n          <ng-container slot=\"text\">notification</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button badged=\"true\" type=\"transparent\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">error_outline</cca-common-icon>\n        </cca-common-button>\n      </li>\n    </ul>\n  `,\n})"
      },
      {
        "name": "Outline",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/common/Button.stories.ts",
        "type": "",
        "defaultValue": "() => ({\n  props: {\n    click: action('This was clicked OMG'),\n  },\n  template: `\n    <ul style=\"display: flex; flex-flow: row wrap; max-width: 100rem; list-style-type: none;\">\n      <li style=\"padding: .5rem\">\n        <cca-common-button (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          <ng-container slot=\"text\">outline</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button (click)=\"click($event)\">\n          <ng-container slot=\"text\">outline</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n        </cca-common-button>\n      </li>\n    </ul>\n  `,\n})"
      },
      {
        "name": "Styles",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/common/Button.stories.ts",
        "type": "",
        "defaultValue": "() => ({\n  props: {\n    click: action('This was clicked OMG'),\n  },\n  template: `\n    <ul style=\"display: flex; flex-flow: row wrap; max-width: 80rem; list-style-type: none;\">\n\n      <!--Primary-->\n      <li style=\"padding: .5rem\">\n        <cca-common-button (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          <ng-container slot=\"text\">primary</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button type=\"fill\" (click)=\"click($event)\">\n          <ng-container slot=\"text\">primary</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button type=\"transparent\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n        </cca-common-button>\n      </li>\n\n      <!--Secondary-->\n      <li style=\"padding: .5rem\">\n        <cca-common-button secondary (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          <ng-container slot=\"text\">secondary</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button secondary type=\"fill\" (click)=\"click($event)\">\n          <ng-container slot=\"text\">secondary</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button secondary type=\"transparent\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n        </cca-common-button>\n      </li>\n\n\n      <!--Flat-->\n      <li style=\"padding: .5rem\">\n        <cca-common-button flat (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          <ng-container slot=\"text\">nova</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button flat type=\"fill\" (click)=\"click($event)\">\n          <ng-container slot=\"text\">nova</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button flat type=\"transparent\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n        </cca-common-button>\n      </li>\n\n      <!--Warning-->\n      <li style=\"padding: .5rem\">\n        <cca-common-button warning (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          <ng-container slot=\"text\">warning</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button warning type=\"fill\" (click)=\"click($event)\">\n          <ng-container slot=\"text\">warning</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button warning type=\"transparent\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n        </cca-common-button>\n      </li>\n\n      <!--Negative-->\n      <li style=\"padding: .5rem\">\n        <div style=\"padding: 1rem; background-color: #234B90;\">\n          <cca-common-button negative (click)=\"click($event)\">\n            <cca-common-icon slot=\"icon\">add</cca-common-icon>\n            <ng-container slot=\"text\">negative</ng-container>\n          </cca-common-button>\n        </div>\n      </li>\n      <li style=\"padding: .5rem\">\n        <div style=\"padding: 1rem; background-color: #234B90;\">\n          <cca-common-button negative type=\"fill\" (click)=\"click($event)\">\n            <ng-container slot=\"text\">negative</ng-container>\n          </cca-common-button>\n        </div>\n      </li>\n      <li style=\"padding: .5rem\">\n        <div style=\"padding: 1rem; background-color: #234B90;\">\n          <cca-common-button negative type=\"transparent\" (click)=\"click($event)\">\n            <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          </cca-common-button>\n        </div>\n      </li>\n    </ul>\n`,\n})"
      },
      {
        "name": "Styles",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/common/Card.stories.ts",
        "type": "",
        "defaultValue": "() => ({\n  template: `\n    <div style=\"width: 30rem; height: 40rem;\">\n      <cca-common-card>\n        <span>This is a card!</span>\n      </cca-common-card>\n    </div>\n  `,\n})"
      },
      {
        "name": "Styles",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/common/Icon.stories.ts",
        "type": "",
        "defaultValue": "() => ({\n  template: `\n    <div style=\"display: flex; flex-flow: row wrap\">\n      <!--Default-->\n      <section style=\"padding: 1rem;\">\n        <cca-common-icon>face</cca-common-icon>\n      </section>\n      <section style=\"padding: 1rem;\">\n        <cca-common-icon size=\"32\" color=\"red\">face</cca-common-icon>\n      </section>\n      <section style=\"padding: 1rem;\">\n        <cca-common-icon size=\"48\" color=\"rgb(120, 0, 0)\">face</cca-common-icon>\n      </section>\n      <section style=\"padding: 1rem;\">\n        <cca-common-icon size=\"64\" color=\"#567700\">face</cca-common-icon>\n      </section>\n    </div>\n  `,\n})"
      },
      {
        "name": "Transparent",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/common/Button.stories.ts",
        "type": "",
        "defaultValue": "() => ({\n  props: {\n    click: action('This was clicked OMG'),\n  },\n  template: `\n    <ul style=\"display: flex; flex-flow: row wrap; max-width: 100rem; list-style-type: none;\">\n      <li style=\"padding: .5rem\">\n        <cca-common-button type=\"transparent\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          <ng-container slot=\"text\">transparent</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button type=\"transparent\" (click)=\"click($event)\">\n          <ng-container slot=\"text\">transparent</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button type=\"transparent\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n        </cca-common-button>\n      </li>\n    </ul>\n  `,\n})"
      }
    ],
    "functions": [],
    "typealiases": [],
    "enumerations": [],
    "groupedVariables": {
      "src/stories/common/Input.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/common/Input.stories.ts",
          "type": "",
          "defaultValue": "() => ({\n  component: InputComponent,\n})"
        }
      ],
      "src/stories/common/Table.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/common/Table.stories.ts",
          "type": "",
          "defaultValue": "() => ({\n  component: TableComponent,\n  props: {\n    firstPage: action('firstPage'),\n    lastPage: action('lastPage'),\n    nextPage: action('nextPage'),\n    previousPage: action('previousPage'),\n    refresh: action('refresh'),\n    pageSizeChange: action('pageSizeChange'),\n    pageIndexChange: action('pageIndexChange'),\n    pageSize: 10,\n    pageIndex: 1,\n    totalEntries: 200,\n    dataSource: [\n      {\n        'Cabeçalho 1': 'Coluna 1',\n        'Cabeçalho 2': 'Coluna 2',\n        'Cabeçalho 3': 'Coluna 3',\n        'Cabeçalho 4': 'Coluna 4',\n        'Cabeçalho 5': 'Coluna 5',\n      },\n      {\n        'Cabeçalho 1': 'Coluna 1',\n        'Cabeçalho 2': 'Coluna 2',\n        'Cabeçalho 3': 'Coluna 3',\n        'Cabeçalho 4': 'Coluna 4',\n        'Cabeçalho 5': 'Coluna 5',\n      },\n      {\n        'Cabeçalho 1': 'Coluna 1',\n        'Cabeçalho 2': 'Coluna 2',\n        'Cabeçalho 3': 'Coluna 3',\n        'Cabeçalho 4': 'Coluna 4',\n        'Cabeçalho 5': 'Coluna 5',\n      },\n      {\n        'Cabeçalho 1': 'Coluna 1',\n        'Cabeçalho 2': 'Coluna 2',\n        'Cabeçalho 3': 'Coluna 3',\n        'Cabeçalho 4': 'Coluna 4',\n        'Cabeçalho 5': 'Coluna 5',\n      },\n      {\n        'Cabeçalho 1': 'Coluna 1',\n        'Cabeçalho 2': 'Coluna 2',\n        'Cabeçalho 3': 'Coluna 3',\n        'Cabeçalho 4': 'Coluna 4',\n        'Cabeçalho 5': 'Coluna 5',\n      },\n    ],\n  },\n})"
        }
      ],
      "src/stories/common/Button.stories.ts": [
        {
          "name": "Fill",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/common/Button.stories.ts",
          "type": "",
          "defaultValue": "() => ({\n  props: {\n    click: action('This was clicked OMG'),\n  },\n  template: `\n    <ul style=\"display: flex; flex-flow: row wrap; max-width: 100rem; list-style-type: none;\">\n      <li style=\"padding: .5rem\">\n        <cca-common-button type=\"fill\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          <ng-container slot=\"text\">fill</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button type=\"fill\" (click)=\"click($event)\">\n          <ng-container slot=\"text\">fill</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button type =\"fill\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n        </cca-common-button>\n      </li>\n    </ul>\n  `,\n})"
        },
        {
          "name": "Notification",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/common/Button.stories.ts",
          "type": "",
          "defaultValue": "() => ({\n  props: {\n    click: action('This was clicked OMG'),\n  },\n  template: `\n    <ul style=\"display: flex; flex-flow: row wrap; max-width: 100rem; list-style-type: none;\">\n      <li style=\"padding: .5rem\">\n        <cca-common-button badged=\"true\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">error_outline</cca-common-icon>\n          <ng-container slot=\"text\">notification</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button badged=\"true\" type=\"fill\" (click)=\"click($event)\">\n          <ng-container slot=\"text\">notification</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button badged=\"true\" type=\"transparent\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">error_outline</cca-common-icon>\n        </cca-common-button>\n      </li>\n    </ul>\n  `,\n})"
        },
        {
          "name": "Outline",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/common/Button.stories.ts",
          "type": "",
          "defaultValue": "() => ({\n  props: {\n    click: action('This was clicked OMG'),\n  },\n  template: `\n    <ul style=\"display: flex; flex-flow: row wrap; max-width: 100rem; list-style-type: none;\">\n      <li style=\"padding: .5rem\">\n        <cca-common-button (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          <ng-container slot=\"text\">outline</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button (click)=\"click($event)\">\n          <ng-container slot=\"text\">outline</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n        </cca-common-button>\n      </li>\n    </ul>\n  `,\n})"
        },
        {
          "name": "Styles",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/common/Button.stories.ts",
          "type": "",
          "defaultValue": "() => ({\n  props: {\n    click: action('This was clicked OMG'),\n  },\n  template: `\n    <ul style=\"display: flex; flex-flow: row wrap; max-width: 80rem; list-style-type: none;\">\n\n      <!--Primary-->\n      <li style=\"padding: .5rem\">\n        <cca-common-button (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          <ng-container slot=\"text\">primary</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button type=\"fill\" (click)=\"click($event)\">\n          <ng-container slot=\"text\">primary</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button type=\"transparent\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n        </cca-common-button>\n      </li>\n\n      <!--Secondary-->\n      <li style=\"padding: .5rem\">\n        <cca-common-button secondary (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          <ng-container slot=\"text\">secondary</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button secondary type=\"fill\" (click)=\"click($event)\">\n          <ng-container slot=\"text\">secondary</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button secondary type=\"transparent\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n        </cca-common-button>\n      </li>\n\n\n      <!--Flat-->\n      <li style=\"padding: .5rem\">\n        <cca-common-button flat (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          <ng-container slot=\"text\">nova</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button flat type=\"fill\" (click)=\"click($event)\">\n          <ng-container slot=\"text\">nova</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button flat type=\"transparent\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n        </cca-common-button>\n      </li>\n\n      <!--Warning-->\n      <li style=\"padding: .5rem\">\n        <cca-common-button warning (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          <ng-container slot=\"text\">warning</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button warning type=\"fill\" (click)=\"click($event)\">\n          <ng-container slot=\"text\">warning</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button warning type=\"transparent\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n        </cca-common-button>\n      </li>\n\n      <!--Negative-->\n      <li style=\"padding: .5rem\">\n        <div style=\"padding: 1rem; background-color: #234B90;\">\n          <cca-common-button negative (click)=\"click($event)\">\n            <cca-common-icon slot=\"icon\">add</cca-common-icon>\n            <ng-container slot=\"text\">negative</ng-container>\n          </cca-common-button>\n        </div>\n      </li>\n      <li style=\"padding: .5rem\">\n        <div style=\"padding: 1rem; background-color: #234B90;\">\n          <cca-common-button negative type=\"fill\" (click)=\"click($event)\">\n            <ng-container slot=\"text\">negative</ng-container>\n          </cca-common-button>\n        </div>\n      </li>\n      <li style=\"padding: .5rem\">\n        <div style=\"padding: 1rem; background-color: #234B90;\">\n          <cca-common-button negative type=\"transparent\" (click)=\"click($event)\">\n            <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          </cca-common-button>\n        </div>\n      </li>\n    </ul>\n`,\n})"
        },
        {
          "name": "Transparent",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/common/Button.stories.ts",
          "type": "",
          "defaultValue": "() => ({\n  props: {\n    click: action('This was clicked OMG'),\n  },\n  template: `\n    <ul style=\"display: flex; flex-flow: row wrap; max-width: 100rem; list-style-type: none;\">\n      <li style=\"padding: .5rem\">\n        <cca-common-button type=\"transparent\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n          <ng-container slot=\"text\">transparent</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button type=\"transparent\" (click)=\"click($event)\">\n          <ng-container slot=\"text\">transparent</ng-container>\n        </cca-common-button>\n      </li>\n      <li style=\"padding: .5rem\">\n        <cca-common-button type=\"transparent\" (click)=\"click($event)\">\n          <cca-common-icon slot=\"icon\">add</cca-common-icon>\n        </cca-common-button>\n      </li>\n    </ul>\n  `,\n})"
        }
      ],
      "src/stories/common/Card.stories.ts": [
        {
          "name": "Styles",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/common/Card.stories.ts",
          "type": "",
          "defaultValue": "() => ({\n  template: `\n    <div style=\"width: 30rem; height: 40rem;\">\n      <cca-common-card>\n        <span>This is a card!</span>\n      </cca-common-card>\n    </div>\n  `,\n})"
        }
      ],
      "src/stories/common/Icon.stories.ts": [
        {
          "name": "Styles",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/common/Icon.stories.ts",
          "type": "",
          "defaultValue": "() => ({\n  template: `\n    <div style=\"display: flex; flex-flow: row wrap\">\n      <!--Default-->\n      <section style=\"padding: 1rem;\">\n        <cca-common-icon>face</cca-common-icon>\n      </section>\n      <section style=\"padding: 1rem;\">\n        <cca-common-icon size=\"32\" color=\"red\">face</cca-common-icon>\n      </section>\n      <section style=\"padding: 1rem;\">\n        <cca-common-icon size=\"48\" color=\"rgb(120, 0, 0)\">face</cca-common-icon>\n      </section>\n      <section style=\"padding: 1rem;\">\n        <cca-common-icon size=\"64\" color=\"#567700\">face</cca-common-icon>\n      </section>\n    </div>\n  `,\n})"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {},
    "groupedTypeAliases": {}
  },
  "routes": [],
  "coverage": {
    "count": 0,
    "status": "low",
    "files": [
      {
        "filePath": "projects/common/src/lib/button/button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonComponent",
        "coveragePercent": 0,
        "coverageCount": "0/18",
        "status": "low"
      },
      {
        "filePath": "projects/common/src/lib/card/card.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CardComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "projects/common/src/lib/icon/icon.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "IconComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "projects/common/src/lib/input/input.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "InputComponent",
        "coveragePercent": 0,
        "coverageCount": "0/21",
        "status": "low"
      },
      {
        "filePath": "projects/common/src/lib/table/table.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TableComponent",
        "coveragePercent": 0,
        "coverageCount": "0/24",
        "status": "low"
      },
      {
        "filePath": "src/stories/common/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Fill",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/common/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Notification",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/common/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Outline",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/common/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Styles",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/common/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Transparent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/common/Card.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Styles",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/common/Icon.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Styles",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/common/Input.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/common/Table.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
